name: Create Standalone Executables
on:
  push:
    branches:
      - standalone
    tags:
      - 'v*'  # Version tags: v2.0

jobs:
  create_release:
    name: Create the Github Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true

  windows:
    name: Create Windows Executables
    runs-on: windows-latest
    needs: create-release
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Setup Node
        uses: actions/setup-node@v2-beta
      - name: Build frontend
        env:
          CI: false   # Otherwise React stops on warnings
        run: |
          cd $env:GITHUB_WORKSPACE/frontend
          yarn install
          yarn build
      - name: Set backend environment
        run: |
          cd $env:GITHUB_WORKSPACE/backend
          pip install -r requirements.txt --extra-index-url https://pypi.fury.io/theresearchsoftwarecompany
          pip install pyinstaller pywin32
      - name: Create executable
        env:  # Replace unicode characters with ?
           PYTHONIOENCODING: :replace
           PYTHONLEGACYWINDOWSIOENCODING: true
        run: |
          cd $env:GITHUB_WORKSPACE/backend
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          python packaging/prepare_installation.py --version ${{ github.ref }}
      - name: Upload to Release
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ jobs.create_release.steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: $GITHUB_WORKSPACE/backend/dist/t2wml-server.exe
          asset_name: t2wml-server.windows.exe
          asset_content_type: application/vnd.microsoft.portable-executable

