{"version":3,"sources":["index/T2WMLLogo.js","serviceWorker.js","index/App.js","index/index.js"],"names":["T2WMLLogo","props","_this","Object","C_Users_zmbq_Sources_Pedro_t2wml_gui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Users_zmbq_Sources_Pedro_t2wml_gui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_zmbq_Sources_Pedro_t2wml_gui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","logo","version","homeUrl","server","_this$state","logoTooltipHtml","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","react_bootstrap__WEBPACK_IMPORTED_MODULE_6__","style","width","className","react_bootstrap__WEBPACK_IMPORTED_MODULE_7__","overlay","placement","trigger","react_bootstrap__WEBPACK_IMPORTED_MODULE_8__","Brand","cursor","fontWeight","onClick","window","location","href","Text","React","Component","__webpack_require__","d","__webpack_exports__","unregister","Boolean","hostname","match","navigator","serviceWorker","ready","then","registration","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","react_default","Navbar","bg","variant","sticky","height","ReactDOM","render","src_index_App","document","getElementById"],"mappings":"iLAKMA,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAAA,OACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAKDQ,MAAQ,CACXC,KAAM,YACNC,QAAS,cACTC,QAASC,0BATMX,wEAaV,IAAAY,EAC4BT,KAAKI,MAAhCC,EADDI,EACCJ,KAAMC,EADPG,EACOH,QAASC,EADhBE,EACgBF,QACjBG,EACJC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,MAAO,CAAEC,MAAO,gBACvBL,EAAAC,EAAAC,cAAA,QAAMI,UAAU,aAAhB,oBACmBN,EAAAC,EAAAC,cAAA,WADnB,qBAMJ,OACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAgBC,QAAST,EAAiBU,UAAU,SAASC,QAAQ,SACnEV,EAAAC,EAAAC,cAACS,EAAA,EAAOC,MAAR,CAAcN,UAAU,OAAOF,MAAO,CAAES,OAAQ,UAAWC,WAAY,QAAUC,QAAS,WAAQC,OAAOC,SAASC,KAAOtB,IACtHF,IAGLM,EAAAC,EAAAC,cAACS,EAAA,EAAOQ,KAAR,CAAab,UAAU,OAAOF,MAAO,CAAES,OAAQ,YAC5ClB,WAhCayB,IAAMC,WAuCfrC,wCC5CfsC,EAAAC,EAAAC,EAAA,sBAAAC,IAYoBC,QACW,cAA7BV,OAAOC,SAASU,UAEe,UAA7BX,OAAOC,SAASU,UAEhBX,OAAOC,SAASU,SAASC,MACvB,2DA8GC,SAASH,IACV,kBAAmBI,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaR,4PClEJS,cAhCb,SAAAA,EAAYjD,GAAO,IAAAC,EAAA,OAAAC,OAAAgD,EAAA,EAAAhD,CAAAE,KAAA6C,IACjBhD,EAAAC,OAAAiD,EAAA,EAAAjD,CAAAE,KAAAF,OAAAkD,EAAA,EAAAlD,CAAA+C,GAAA1C,KAAAH,KAAMJ,KAGDQ,MAAQ,GAJIP,wEAUjB,OACEoD,EAAArC,EAAAC,cAAA,WAGEoC,EAAArC,EAAAC,cAAA,WACEoC,EAAArC,EAAAC,cAACqC,EAAA,EAAD,CAAQjC,UAAU,SAASkC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,MAAMtC,MAAO,CAAEuC,OAAQ,SAGhFL,EAAArC,EAAAC,cAAClB,EAAA,EAAD,QAMJsD,EAAArC,EAAAC,cAAA,oBAzBUkB,IAAMC,oBC1BxBuB,IAASC,OAAOP,EAAArC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SAKjDlB","file":"static/js/index.c15ab0d5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// T2WMLLogo\r\nimport { Navbar, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\n\r\nclass T2WMLLogo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const server = \"http://localhost:5000\";\r\n\r\n    // init state\r\n    this.state = {\r\n      logo: \"T2WML GUI\",\r\n      version: \"v1.5 (beta)\",\r\n      homeUrl: server + \"/\",\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { logo, version, homeUrl } = this.state;\r\n    const logoTooltipHtml = (\r\n      <Tooltip style={{ width: \"fit-content\" }}>\r\n        <span className=\"text-left\">\r\n          Table to Wikidata<br />\r\n          Mapping Language\r\n        </span>\r\n      </Tooltip>\r\n    );\r\n    return (\r\n      <span>\r\n        <OverlayTrigger overlay={logoTooltipHtml} placement=\"bottom\" trigger=\"hover\">\r\n          <Navbar.Brand className=\"pl-2\" style={{ cursor: \"pointer\", fontWeight: \"bold\" }} onClick={() => { window.location.href = homeUrl; }}>\r\n            {logo}\r\n          </Navbar.Brand>\r\n        </OverlayTrigger>\r\n        <Navbar.Text className=\"pr-2\" style={{ cursor: \"default\" }}>\r\n          {version}\r\n        </Navbar.Text>\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\nexport default T2WMLLogo;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\n// import * as utils from '../utils'\r\nimport T2WMLLogo from '../index/T2WMLLogo'\r\n\r\n// App\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\n// http://patorjk.com/software/taag/#p=display&f=Doh&t=App\r\n//                AAA                                                      \r\n//               A:::A                                                     \r\n//              A:::::A                                                    \r\n//             A:::::::A                                                   \r\n//            A:::::::::A          ppppp   ppppppppp   ppppp   ppppppppp   \r\n//           A:::::A:::::A         p::::ppp:::::::::p  p::::ppp:::::::::p  \r\n//          A:::::A A:::::A        p:::::::::::::::::p p:::::::::::::::::p \r\n//         A:::::A   A:::::A       pp::::::ppppp::::::ppp::::::ppppp::::::p\r\n//        A:::::A     A:::::A       p:::::p     p:::::p p:::::p     p:::::p\r\n//       A:::::AAAAAAAAA:::::A      p:::::p     p:::::p p:::::p     p:::::p\r\n//      A:::::::::::::::::::::A     p:::::p     p:::::p p:::::p     p:::::p\r\n//     A:::::AAAAAAAAAAAAA:::::A    p:::::p    p::::::p p:::::p    p::::::p\r\n//    A:::::A             A:::::A   p:::::ppppp:::::::p p:::::ppppp:::::::p\r\n//   A:::::A               A:::::A  p::::::::::::::::p  p::::::::::::::::p \r\n//  A:::::A                 A:::::A p::::::::::::::pp   p::::::::::::::pp  \r\n// AAAAAAA                   AAAAAAAp::::::pppppppp     p::::::pppppppp    \r\n//                                  p:::::p             p:::::p            \r\n//                                  p:::::p             p:::::p            \r\n//                                 p:::::::p           p:::::::p           \r\n//                                 p:::::::p           p:::::::p           \r\n//                                 p:::::::p           p:::::::p           \r\n//                                 ppppppppp           ppppppppp      \r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // init app\r\n    this.state = {\r\n\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n\r\n        {/* navbar */}\r\n        <div>\r\n          <Navbar className=\"shadow\" bg=\"dark\" variant=\"dark\" sticky=\"top\" style={{ height: \"50px\" }}>\r\n\r\n            {/* logo */}\r\n            <T2WMLLogo />\r\n\r\n          </Navbar>\r\n        </div>\r\n\r\n        {/* content */}\r\n        <div>\r\n          {/* nothing */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../index/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from '../serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}